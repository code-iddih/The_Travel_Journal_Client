{"ast":null,"code":"import React,{useContext}from\"react\";import{Route,Redirect}from\"react-router-dom\";import{AuthContext}from\"../context/AuthContext\";import{jsx as _jsx}from\"react/jsx-runtime\";function ProtectedRoute(_ref){let{component:Component,...rest}=_ref;const{isAuthenticated}=useContext(AuthContext);return/*#__PURE__*/_jsx(Route,{...rest,render:props=>isAuthenticated?/*#__PURE__*/_jsx(Component,{...props}):/*#__PURE__*/_jsx(Redirect,{to:{pathname:\"/login\",state:{from:props.location}}})});}export default ProtectedRoute;","map":{"version":3,"names":["React","useContext","Route","Redirect","AuthContext","jsx","_jsx","ProtectedRoute","_ref","component","Component","rest","isAuthenticated","render","props","to","pathname","state","from","location"],"sources":["/home/code-iddih/Music/client/src/components/ProtectedRoute.js"],"sourcesContent":["import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\n\nfunction ProtectedRoute({ component: Component, ...rest }) {\n  const { isAuthenticated } = useContext(AuthContext);\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isAuthenticated ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{ pathname: \"/login\", state: { from: props.location } }}\n          />\n        )\n      }\n    />\n  );\n}\n\nexport default ProtectedRoute;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,UAAU,KAAQ,OAAO,CACzC,OAASC,KAAK,CAAEC,QAAQ,KAAQ,kBAAkB,CAClD,OAASC,WAAW,KAAQ,wBAAwB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAErD,QAAS,CAAAC,cAAcA,CAAAC,IAAA,CAAoC,IAAnC,CAAEC,SAAS,CAAEC,SAAS,CAAE,GAAGC,IAAK,CAAC,CAAAH,IAAA,CACvD,KAAM,CAAEI,eAAgB,CAAC,CAAGX,UAAU,CAACG,WAAW,CAAC,CAEnD,mBACEE,IAAA,CAACJ,KAAK,KACAS,IAAI,CACRE,MAAM,CAAGC,KAAK,EACZF,eAAe,cACbN,IAAA,CAACI,SAAS,KAAKI,KAAK,CAAG,CAAC,cAExBR,IAAA,CAACH,QAAQ,EACPY,EAAE,CAAE,CAAEC,QAAQ,CAAE,QAAQ,CAAEC,KAAK,CAAE,CAAEC,IAAI,CAAEJ,KAAK,CAACK,QAAS,CAAE,CAAE,CAC7D,CAEJ,CACF,CAAC,CAEN,CAEA,cAAe,CAAAZ,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}